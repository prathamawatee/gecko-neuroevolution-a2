:py:mod:`a001`
=======================

.. py:module:: ariel.ec.a001

.. autoapi-nested-parse::

   TODO(jmdm): description of script.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ariel.ec.a001.Individual



Functions
~~~~~~~~~

.. autoapisummary::

   ariel.ec.a001.init_database
   ariel.ec.a001.main



Attributes
~~~~~~~~~~

.. autoapisummary::

   ariel.ec.a001.SCRIPT_NAME
   ariel.ec.a001.CWD
   ariel.ec.a001.DATA
   ariel.ec.a001.DB_NAME
   ariel.ec.a001.DB_PATH
   ariel.ec.a001.SEED
   ariel.ec.a001.console
   ariel.ec.a001.prnt
   ariel.ec.a001.rlg
   ariel.ec.a001.RNG
   ariel.ec.a001.JSONPrimitive
   ariel.ec.a001.JSONType
   ariel.ec.a001.JSONIterable


.. py:data:: SCRIPT_NAME

.. py:data:: CWD

.. py:data:: DATA

.. py:data:: DB_NAME
   :value: 'database.db'


.. py:data:: DB_PATH
   :type:  pathlib.Path

.. py:data:: SEED
   :value: 42


.. py:data:: console

.. py:data:: prnt

.. py:data:: rlg

.. py:data:: RNG

.. py:type:: JSONPrimitive
   :canonical: str | int | float | bool


.. py:type:: JSONType
   :canonical: JSONPrimitive | Sequence[JSONType] | dict[Hashable, JSONType]


.. py:type:: JSONIterable
   :canonical: Sequence[JSONType] | dict[Hashable, JSONType]


.. py:function:: init_database() -> sqlalchemy.Engine

   Initialize a database with a JSON data model.

   :returns: The SQLAlchemy engine instance.
   :rtype: :class:`Engine`


.. py:class:: Individual(**data: Any)

   Bases: :py:obj:`sqlmodel.SQLModel`

   .. autoapi-inheritance-diagram:: ariel.ec.a001.Individual
      :parts: 1


   !!! abstract "Usage Documentation"
       [Models](../concepts/models.md)

   A base class for creating Pydantic models.

   :ivar __class_vars__: The names of the class variables defined on the model.
   :ivar __private_attributes__: Metadata about the private attributes of the model.
   :ivar __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

   :ivar __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
   :ivar __pydantic_core_schema__: The core schema of the model.
   :ivar __pydantic_custom_init__: Whether the model has a custom `__init__` function.
   :ivar __pydantic_decorators__: Metadata containing the decorators defined on the model.
                                  This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
   :ivar __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
                                        __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
   :ivar __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
   :ivar __pydantic_post_init__: The name of the post-init method for the model, if defined.
   :ivar __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
   :ivar __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
   :ivar __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

   :ivar __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
   :ivar __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

   :ivar __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
                             is set to `'allow'`.
   :ivar __pydantic_fields_set__: The names of fields explicitly set during instantiation.
   :ivar __pydantic_private__: Values of private attributes set on the model instance.



   .. py:attribute:: id
      :type:  int | None
      :value: None



   .. py:attribute:: alive
      :type:  bool
      :value: None



   .. py:attribute:: time_of_birth
      :type:  int
      :value: None



   .. py:attribute:: time_of_death
      :type:  int
      :value: None



   .. py:attribute:: requires_eval
      :type:  bool
      :value: None



   .. py:attribute:: fitness_
      :type:  float | None
      :value: None



   .. py:property:: fitness
      :type: float



   .. py:attribute:: requires_init
      :type:  bool
      :value: None



   .. py:attribute:: genotype_
      :type:  JSONIterable | None
      :value: None



   .. py:property:: genotype
      :type: JSONIterable



   .. py:attribute:: tags_
      :type:  dict[JSONType, JSONType]
      :value: None



   .. py:property:: tags
      :type: dict[JSONType, JSONType]



.. py:function:: main() -> None

   Entry point.


