:py:mod:`nde`
================================

.. py:module:: ariel.ec.genotypes.nde

.. autoapi-nested-parse::

   Neural developmental encodings.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   nde/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   ariel.ec.genotypes.nde.NeuralDevelopmentalEncoding




.. py:class:: NeuralDevelopmentalEncoding(number_of_modules: int)

   Bases: :py:obj:`torch.nn.Module`

   .. autoapi-inheritance-diagram:: ariel.ec.genotypes.nde.NeuralDevelopmentalEncoding
      :parts: 1


   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing them to be nested in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F


       class Model(nn.Module):
           def __init__(self) -> None:
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will also have their
   parameters converted when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool


   .. py:attribute:: fc1


   .. py:attribute:: fc2


   .. py:attribute:: fc3


   .. py:attribute:: fc4


   .. py:attribute:: type_p_shape


   .. py:attribute:: type_p_out


   .. py:attribute:: conn_p_shape


   .. py:attribute:: conn_p_out


   .. py:attribute:: rot_p_shape


   .. py:attribute:: rot_p_out


   .. py:attribute:: output_layers


   .. py:attribute:: output_shapes


   .. py:attribute:: relu


   .. py:attribute:: sigmoid


   .. py:method:: forward(genotype: list[numpy.typing.NDArray[numpy.float32]]) -> list[numpy.typing.NDArray[numpy.float32]]


