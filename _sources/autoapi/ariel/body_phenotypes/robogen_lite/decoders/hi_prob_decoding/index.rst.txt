:py:mod:`hi_prob_decoding`
======================================================================

.. py:module:: ariel.body_phenotypes.robogen_lite.decoders.hi_prob_decoding

.. autoapi-nested-parse::

   Highest-probability-decoding algorithm for ARIEL-robots.

   .. note::

      * Graphs are represented as directed graphs (DiGraph) using NetworkX.
      * Graphs are saved as JSON [1]_.

   .. admonition:: References

      .. [1] `NetworkX JSON Graph <https://networkx.org/documentation/stable/reference/readwrite/generated/networkx.readwrite.json_graph.tree_data.html#networkx.readwrite.json_graph.tree_data>`_

   .. todo::

      - [ ] for loops to be replaced with vectorized operations
      - [ ] DiGraph positioning use cartesian coordinates instead of spring layout
      - [ ] Should probably move the graph functions to a separate script



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ariel.body_phenotypes.robogen_lite.decoders.hi_prob_decoding.HighProbabilityDecoder



Functions
~~~~~~~~~

.. autoapisummary::

   ariel.body_phenotypes.robogen_lite.decoders.hi_prob_decoding.save_graph_as_json
   ariel.body_phenotypes.robogen_lite.decoders.hi_prob_decoding.draw_graph



Attributes
~~~~~~~~~~

.. autoapisummary::

   ariel.body_phenotypes.robogen_lite.decoders.hi_prob_decoding.SEED
   ariel.body_phenotypes.robogen_lite.decoders.hi_prob_decoding.DPI
   ariel.body_phenotypes.robogen_lite.decoders.hi_prob_decoding.RNG


.. py:data:: SEED
   :value: 42


.. py:data:: DPI
   :value: 300


.. py:data:: RNG

.. py:class:: HighProbabilityDecoder(num_modules: int)

   Implements the high-probability-decoding algorithm.


   .. py:attribute:: num_modules


   .. py:attribute:: graph
      :type:  networkx.DiGraph[Any]


   .. py:method:: probability_matrices_to_graph(type_probability_space: numpy.typing.NDArray[numpy.float32], connection_probability_space: numpy.typing.NDArray[numpy.float32], rotation_probability_space: numpy.typing.NDArray[numpy.float32]) -> networkx.DiGraph[Any]

      Convert probability matrices to a graph.

      :param type_probability_space: Probability space for module types.
      :param connection_probability_space: Probability space for connections between modules.
      :param rotation_probability_space: Probability space for module rotations.

      :returns: A graph representing the decoded modules and their connections.
      :rtype: :class:`DiGraph`



   .. py:method:: generate_networkx_graph() -> None

      Generate a NetworkX graph from the decoded graph.



   .. py:method:: decode_probability_to_graph() -> None

      Decode the probability spaces into a graph.



   .. py:method:: set_module_types_and_rotations() -> None

      Set the module types and rotations using probability spaces.



   .. py:method:: apply_connection_constraints() -> None

      Apply connection constraints to probability spaces.



.. py:function:: save_graph_as_json(graph: networkx.DiGraph[Any], save_file: pathlib.Path | str | None = None) -> None

   Save a directed graph as a JSON file.

   :param graph: The directed graph to save.
   :type graph: :class:`DiGraph`
   :param save_file: The file path to save the graph JSON, by default None
   :type save_file: :class:`Path | str | None`, *optional*


.. py:function:: draw_graph(graph: networkx.DiGraph[Any], title: str = 'NetworkX Directed Graph', save_file: pathlib.Path | str | None = None) -> None

   Draw a directed graph.

   :param graph: The directed graph to draw.
   :type graph: :class:`DiGraph`
   :param title: The title of the graph.
   :type title: :class:`str`
   :param save_file: The file path to save the graph image, by default None
   :type save_file: :class:`Path | str | None`, *optional*


